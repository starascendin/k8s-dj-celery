# ========
# Note, i have to define IaC for dev and prod env.
# For prod, the name is as is (bossdesk-<resource>).
# - use envGroup app-env-prod
# - use `main` branch
#
# For dev, append -prod to names.
# - use envGroup app-env-prod
# - use `develop` branch
#

# databases:
#   - name: bossdesk-pg-prod
#     databaseName: bbg
#     user: bbg_admin

services:
  # === CELERY FLOWER
  - type: web
    name: bossdesk-flower-prod
    dockerfilePath: ./compose/production/django/Dockerfile
    plan: starter # optional (defaults to starter)
    env: docker
    dockerContext: .
    dockerCommand: /start-flower

    ## copied from django setting. Use that as SOT
    envVars:
      - fromGroup: bossdesk-env-prod    
      - key: REDIS_URL
        value: redis://bossdesk-redis-prod:10000     
      - key: CELERY_BROKER_URL
        value: redis://bossdesk-redis-prod:10000     
      # - key: DATABASE_URL 
      #   value: postgresql://postgres:6OxMzFX1cYmSMlQU@db.uukkuoxgayujrukubywa.supabase.co:5432/postgres
      # - key: POSTGRES_HOST 
      #   value: db.uukkuoxgayujrukubywa.supabase.co 
      # - key: POSTGRES_PORT
      #   value: 5432
      # - key: POSTGRES_DB
      #   value: postgres
      # - key: POSTGRES_USER
      #   value: postgres
      # - key: POSTGRES_PASSWORD
      #   value: 6OxMzFX1cYmSMlQU


  # === CELERY WORKER
  - type: worker
    name: bossdesk-worker-prod
    dockerfilePath: ./compose/production/django/Dockerfile
    plan: Pro # optional (defaults to starter)
    env: docker
    dockerContext: .
    dockerCommand: /start-celeryworker

    ## copied from django setting. Use that as SOT
    envVars:
      # NOTE: redis_url should be a hardcoded value copied from the deployed service (Cant retrieve it from services like db)
      - fromGroup: bossdesk-env-prod
      - key: REDIS_URL
        value: redis://bossdesk-redis-prod:10000     
      - key: CELERY_BROKER_URL
        value: redis://bossdesk-redis-prod:10000     
      # - key: DATABASE_URL 
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: connectionString
      # - key: POSTGRES_HOST 
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: host          
      # - key: POSTGRES_PORT
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: port
      # - key: POSTGRES_DB
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: database
      # - key: POSTGRES_USER
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: user          
      # - key: POSTGRES_PASSWORD
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: password                    


  # === REDIS
  - type: pserv
    plan: starter # optional (defaults to starter)
    name: bossdesk-redis-prod
    env: docker
    repo: https://github.com/starascendin/render-redis.git 
    envVars:
      - key: GENERATED_SECRET
        generateValue: true # will generate a base64-encoded 256-bit secret
      - key: DASHBOARD_SECRET
        generateValue: true # will generate a base64-encoded 256-bit secret
    disk:
      name: redis-data
      mountPath: /var/lib/redis
      sizeGB: 5 # optional

  # === DJ app      
  - type: web
    name: bossdesk-app-prod
    dockerfilePath: ./compose/production/django/Dockerfile
    plan: standard # optional (defaults to starter)
    env: docker
    dockerContext: .
    # dockerCommand: poetry run migrate_and_server
    dockerCommand: /start
    healthCheckPath: /health
    envVars:
      - fromGroup: bossdesk-env-prod            
      - key: REDIS_URL
        value: redis://bossdesk-redis-prod:10000     
      - key: CELERY_BROKER_URL
        value: redis://bossdesk-redis-prod:10000     
      # - key: DATABASE_URL 
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: connectionString
      # - key: POSTGRES_HOST 
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: host          
      # - key: POSTGRES_PORT
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: port
      # - key: POSTGRES_DB
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: database
      # - key: POSTGRES_USER
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: user          
      # - key: POSTGRES_PASSWORD
      #   fromDatabase:
      #     name: bossdesk-pg-prod
      #     property: password                    


envVarGroups:
  - name: bossdesk-env-prod # PROD ENV GROUP
    envVars:
      - key: POSTGRES_HOST 
        value: db.uukkuoxgayujrukubywa.supabase.co 
      - key: POSTGRES_PORT
        value: 5432
      - key: POSTGRES_DB
        value: postgres
      - key: POSTGRES_USER
        value: postgres
      - key: POSTGRES_PASSWORD
        # value: 6OxMzFX1cYmSMlQU
        generateValue: true


      - key: RUNTIME_ENV
        value: PROD  
      - key: DJANGO_SETTINGS_MODULE
        value: config.settings.production  
      - key: DJANGO_SECRET_KEY
        generateValue: true
      - key: DJANGO_ADMIN_URL
        value: admin/
      # - key: DJANGO_ALLOWED_HOSTS
      #   value: .onrender.com  # or .diamondapes.onrender.com?
      - key: DJANGO_SECURE_SSL_REDIRECT
        value: false
      - key: DJANGO_ACCOUNT_ALLOW_REGISTRATION
        value: true
      # Gunicorn run options
      - key: WEB_CONCURRENCY
        value: 4
      # Redis: env should be pulled from services (cannot be defined in envGroup in render)
      # Celery
      - key: CELERY_FLOWER_USER
        value: bossdesk-prod
      - key: CELERY_FLOWER_PASSWORD
        generateValue: true
      # TODO: add these on later (10/04/21)  
      # Email
      - key: DJANGO_SERVER_EMAIL
        value: dummy
      - key: MAILGUN_API_KEY
        value: dummy
      - key: MAILGUN_DOMAIN
        value: dummy
      - key: API_ENCRYPT_KEY
        generateValue: true
      - key: SUPABASE_URL
        value: https://uukkuoxgayujrukubywa.supabase.co
      - key: SUPABASE_KEY
        value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV1a2t1b3hnYXl1anJ1a3VieXdhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY3ODk4NDMzMywiZXhwIjoxOTk0NTYwMzMzfQ.aiWIe-YHaL9Yzp2V6FMWH_drv3nYzQhZ5SFyGzisNhA
      - key: YT_API_KEY
        value: AIzaSyDLTKG_yxJypSuv5KvM4yq0rOfuP0DCkPY        
      - key: ENDPOINT_URL
        value: https://ewr1.vultrobjects.com
      - key: AWS_ACCESS_KEY_ID
        value: A9ZBNCH9390JAWJEVE59
      - key: AWS_SECRET_ACCESS_KEY
        value: J1sZQxZ76ZTBP3Wm9sxhKeZfFayGnFkAIrVrBBHR        
        
      # SENTRY Logging
      - key: SENTRY_DSN
        value: https://96a4de1ffc104c43b421d74fbf90de01@o1017641.ingest.sentry.io/6318594
      # breadcrumb capture (DEBUG, or INFO and bove)
      - key: DJANGO_SENTRY_LOG_LEVEL
        value: 20
      # events level
      - key: DJANGO_SENTRY_LOG_EVENT_LEVEL
        value: 30       
      # environemnt 
      - key: SENTRY_ENVIRONMENT
        value: 'production'        

